{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitreposit\\\\React_Image_Search\\\\src\\\\components\\\\Cart\\\\Cart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport Modal from '../Commons/Modal';\nimport classes from './Cart.module.css';\nimport Button from '../Commons/Button';\nimport QueryContext from '../../store/QueryContext';\nimport ImageContext from '../../store/ImageContext';\nimport CartItem from './CartItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cart = props => {\n  _s();\n\n  let queryContext = useContext(QueryContext);\n  let imageContext = useContext(ImageContext);\n  let url = imageContext.imageurl.replace(/\\\"/gi, \"\");\n\n  const cartItems = /*#__PURE__*/_jsxDEV(CartItem, {\n    url: url\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n\n  const openAlert = () => {\n    if (window.confirm(\"축하합니다! 원하는 이미지를 찾으셨군요!\\n다운로드를 원하시면 '확인'버튼을 눌러주세요.\\n새창에 나온 이미지를 다운받을 수 있습니다.\")) {\n      window.open(url);\n    }\n  };\n\n  useEffect(() => {\n    let text = queryContext.query;\n    const textbox = {\n      inText: text\n    };\n    fetch(\"http://localhost:3001/text\", {\n      //text 주소에서 받을 예정\n      method: \"post\",\n      //통신방법\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(textbox) //textbox라는 객체를 보냄\n\n    }).then(response => response.text()).then(imageContext.updateImage);\n  }, [queryContext]);\n\n  const openRetry = () => {\n    if (window.confirm(\"원하시는 이미지가 아니시군요! \\n 만약 원하시는 이미지를 찾고 싶으시면 '확인'버튼을 눌러주세요.\")) {\n      const text = queryContext.query;\n      const keywordbox = {\n        inText: text\n      };\n      fetch(\"http://localhost:3001/keyword\", {\n        //text 주소에서 받을 예정\n        method: \"post\",\n        //통신방법\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(keywordbox) //textbox라는 객체를 보냄\n\n      }).then(response => response.text()).then(queryContext.updateQuery);\n      url = '0';\n      return /*#__PURE__*/_jsxDEV(Modal, {\n        onClose: props.onClose,\n        children: cartModalContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }, this);\n    }\n  };\n\n  const modalButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.buttons,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: props.onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: openRetry,\n      children: \"Retry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: openAlert,\n      children: \"Correct\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n\n  const cartModalContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [cartItems, modalButton]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: props.onClose,\n    children: cartModalContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Cart, \"jLRPGpLczUgcBqE5zY3A1qlD4eo=\");\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["C:/gitreposit/React_Image_Search/src/components/Cart/Cart.jsx"],"names":["React","useContext","useEffect","Modal","classes","Button","QueryContext","ImageContext","CartItem","Cart","props","queryContext","imageContext","url","imageurl","replace","cartItems","openAlert","window","confirm","open","text","query","textbox","inText","fetch","method","headers","body","JSON","stringify","then","response","updateImage","openRetry","keywordbox","updateQuery","onClose","cartModalContent","modalButton","buttons"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react'\r\nimport Modal from '../Commons/Modal'\r\nimport classes from './Cart.module.css'\r\nimport Button from '../Commons/Button'\r\nimport QueryContext from '../../store/QueryContext'\r\nimport ImageContext from '../../store/ImageContext'\r\nimport CartItem from './CartItem'\r\n\r\n\r\n\r\nconst Cart = (props) => {\r\n\r\n  let queryContext = useContext(QueryContext)\r\n\r\n  let imageContext = useContext(ImageContext);\r\n  \r\n  let url = imageContext.imageurl.replace(/\\\"/gi, \"\");\r\n  \r\n\r\n  const cartItems = (\r\n    <CartItem url={url}/>\r\n  );\r\n\r\n    const openAlert = () => {\r\n        if(window.confirm(\"축하합니다! 원하는 이미지를 찾으셨군요!\\n다운로드를 원하시면 '확인'버튼을 눌러주세요.\\n새창에 나온 이미지를 다운받을 수 있습니다.\")){\r\n          window.open(url);\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n      let text = queryContext.query;\r\n\r\n    const textbox = {\r\n      inText: text,\r\n    };\r\n    fetch(\"http://localhost:3001/text\", { //text 주소에서 받을 예정\r\n    method: \"post\", //통신방법\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(textbox), //textbox라는 객체를 보냄\r\n  }).then(response => response.text()).then(imageContext.updateImage);\r\n\r\n    }, [queryContext])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const openRetry = () => {\r\n\r\n    if(window.confirm(\"원하시는 이미지가 아니시군요! \\n 만약 원하시는 이미지를 찾고 싶으시면 '확인'버튼을 눌러주세요.\")){\r\n      const text = queryContext.query;\r\n      \r\n      const keywordbox = {\r\n        inText: text,\r\n      };\r\n      fetch(\"http://localhost:3001/keyword\", { //text 주소에서 받을 예정\r\n      method: \"post\", //통신방법\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(keywordbox), //textbox라는 객체를 보냄\r\n  }).then(response => response.text()).then(queryContext.updateQuery);\r\n  \r\n  url = '0';\r\n  return <Modal onClose={props.onClose}>{cartModalContent}</Modal>;\r\n  \r\n}\r\n\r\n\r\n  }\r\n\r\n\r\n  const modalButton = (\r\n    <div className={classes.buttons}>\r\n      <Button onClick={props.onClose}>Close</Button>\r\n      <Button onClick={openRetry}>Retry</Button>\r\n      <Button onClick={openAlert}>Correct</Button>\r\n    </div>\r\n  );\r\n  \r\n  const cartModalContent = (\r\n    <>\r\n      {cartItems}\r\n      {/* 취소, 주문 버튼(modalButton) */}\r\n      {modalButton}\r\n    </>\r\n  )\r\n\r\n  return <Modal onClose={props.onClose}>{cartModalContent}</Modal>;\r\n}\r\n\r\nexport default Cart"]},"metadata":{},"sourceType":"module"}